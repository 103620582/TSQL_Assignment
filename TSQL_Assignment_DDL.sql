-- tim's server --

-- USE JoyAssignment

-- SELECT name, database_id, create_date 
-- FROM sys.databases;

------ CHECK TABLES ----

-- SELECT * FROM SYSOBJECTS
-- WHERE xtype = 'U';

-- GO



IF OBJECT_ID('Sale') IS NOT NULL
DROP TABLE SALE;

IF OBJECT_ID('Product') IS NOT NULL
DROP TABLE PRODUCT;

IF OBJECT_ID('Customer') IS NOT NULL
DROP TABLE CUSTOMER;

IF OBJECT_ID('Location') IS NOT NULL
DROP TABLE LOCATION;

GO

CREATE TABLE CUSTOMER (
CUSTID	INT
, CUSTNAME	NVARCHAR(100)
, SALES_YTD	MONEY
, STATUS	NVARCHAR(7)
, PRIMARY KEY	(CUSTID) 
);

CREATE TABLE PRODUCT (
PRODID	INT
, PRODNAME	NVARCHAR(100)
, SELLING_PRICE	MONEY
, SALES_YTD	MONEY
, PRIMARY KEY	(PRODID)
);

CREATE TABLE SALE (
SALEID	BIGINT
, CUSTID	INT
, PRODID	INT
, QTY	INT
, PRICE	MONEY
, SALEDATE	DATE
, PRIMARY KEY 	(SALEID)
, FOREIGN KEY 	(CUSTID) REFERENCES CUSTOMER
, FOREIGN KEY 	(PRODID) REFERENCES PRODUCT
);

CREATE TABLE LOCATION (
  LOCID	NVARCHAR(5)
, MINQTY	INTEGER
, MAXQTY	INTEGER
, PRIMARY KEY 	(LOCID)
, CONSTRAINT CHECK_LOCID_LENGTH CHECK (LEN(LOCID) = 5)
, CONSTRAINT CHECK_MINQTY_RANGE CHECK (MINQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_RANGE CHECK (MAXQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK (MAXQTY >= MINQTY)
);

IF OBJECT_ID('SALE_SEQ') IS NOT NULL
DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ;

GO

-- ADD_CUSTOMER ------------------

IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL
DROP PROCEDURE ADD_CUSTOMER;
GO

CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS

BEGIN
    BEGIN TRY

        IF @PCUSTID < 1 OR @PCUSTID > 499
            THROW 50020, 'Customer ID out of range', 1

        INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS)
        VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');
    END TRY

    BEGIN CATCH
        IF ERROR_MESSAGE() = 2627
            THROW 50010, 'Duplicate customer ID', 1
        ELSE IF ERROR_NUMBER() = 50020
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END;
        END CATCH;

END;

GO

EXEC ADD_CUSTOMER @PCUSTID = 1, @PCUSTNAME = 'TESTDUDE1';
EXEC ADD_CUSTOMER @PCUSTID = 66, @PCUSTNAME = 'TESTDUDE2';
EXEC ADD_CUSTOMER @PCUSTID = 499, @PCUSTNAME = 'TESTDUDE3';
SELECT * FROM CUSTOMER;

-- DELETE_ALL_CUSTOMERS ------------------

IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;

GO

CREATE PROCEDURE DELETE_ALL_CUSTOMERS AS

BEGIN
    BEGIN TRY
        DELETE FROM CUSTOMER;
        RETURN @@ROWCOUNT
    END TRY
    BEGIN CATCH
        BEGIN
            DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
            THROW 50000, @ERRORMESSAGE, 1
        END;
    END CATCH;
END;

GO

EXEC DELETE_ALL_CUSTOMERS;
SELECT * FROM CUSTOMER;

-- ADD_PRODUCT -------

IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL
DROP PROCEDURE ADD_PRODUCT;

GO

CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR(100), @PPRICE MONEY AS

BEGIN
    BEGIN TRY
        IF @PPRODID < 1000 OR @PPRODID > 2500
            THROW 50040, 'Product ID out of range.', 1

            ELSE IF @PPRICE < 0 OR @PPRICE > 999.99
                THROW 50050, 'Price out of range.', 1

            INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD)
            VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);
    END TRY

    BEGIN CATCH
        DECLARE @ERRORmessage NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END CATCH;

END;

GO

EXEC ADD_PRODUCT @PPRODID = 1234, @PPRODNAME = "Dude Juice", @PPRICE = 33;
SELECT * FROM PRODUCT;

-- DELETE_ALL_PRODUCTS ------

IF OBJECT_ID('DELETE_ALL_PRODUCTS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_PRODUCTS;

GO

CREATE PROCEDURE DELETE_ALL_PRODUCTS AS

BEGIN
    BEGIN TRY
        DELETE FROM PRODUCT;
        DECLARE @PRODROWSDELETED INT = @@ROWCOUNT;
        RETURN @@ROWCOUNT
    END TRY
    
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END CATCH
END;

GO

EXEC DELETE_ALL_PRODUCTS;
SELECT * FROM PRODUCT;


-- GET_CUSTOMER_STRING ------

IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL
DROP PROCEDURE GET_CUSTOMER_STRING;

GO

CREATE PROCEDURE GET_CUSTOMER_STRING 
    @PCUSTID INT, 
    @PRETURNSTRING NVARCHAR(1000) 
OUT AS

BEGIN
    BEGIN TRY
        DECLARE @CNAME NVARCHAR(100);
        DECLARE @STATUS NVARCHAR(7);
        DECLARE @SYTD MONEY;

        SELECT @CNAME = CUSTNAME, @STATUS = STATUS, @SYTD = SALES_YTD
        FROM CUSTOMER WHERE CUSTID = @PCUSTID;

        SET @PRETURNSTRING = CONCAT('CUSTID: ', @PCUSTID, 'NAME: ', @CNAME, 'STATUS: ', @STATUS, 'SALES YTD: ', @SYTD)
    END TRY

    BEGIN CATCH
        IF ERROR_NUMBER() = 2627
            THROW 50060, 'Customer ID not found', 1
                ELSE
                    BEGIN
                        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                        THROW 50000, @ERRORMESSAGE, 1
                    END;
     END CATCH;
END;

GO

INSERT INTO CUSTOMER (CUSTID, CUSTNAME, STATUS, SALES_YTD)
VALUES (666, 'FRANK OCEAN', 'M.I.A', 50)

SELECT * FROM CUSTOMER;

BEGIN
    DECLARE @RSTRING NVARCHAR(1000);
    SET @RSTRING = 'Original value';
    
    EXEC GET_CUSTOMER_STRING @PCUSTID = 222, @PRETURNSTRING = @RSTRING OUT;
    PRINT(@RSTRING);
END;

GO


-- UPD_CUST_SALESYTD ------

IF OBJECT_ID ('UPD_CUST_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_CUST_SALESYTD

GO

CREATE PROCEDURE UPD_CUST_SALESYTD 
    @PCUSTID INT, 
    @PAMT MONEY
AS

BEGIN
    BEGIN TRY
        IF @PAMT < -999.99 OR @PAMT > 999.99
            THROW 50080, 'Amount out of range', 1
            UPDATE CUSTOMER SET SALES_YTD = SALES_YTD + @PAMT
            WHERE CUSTID = @PCUSTID;
    END TRY
    
    BEGIN CATCH
        IF @@ROWCOUNT = 0
            THROW 50070, 'Customer ID not found', 1
            ELSE
                BEGIN
                    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                    THROW 50000, @ERRORMESSAGE, 1
                END;
    END CATCH
END;

EXEC UPD_CUST_SALESYTD @PCUSTID = 666, @PAMT = 22;
SELECT * FROM CUSTOMER;

GO


                
